#!/bin/python3

import psutil
import os
import time
import configparser

CONFIG_FILE = "/etc/auto-epp.conf"
DEFAULT_CONFIG = """# see available epp state by running: cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_available_preferences
[Settings]
epp_state_for_AC=balance_performance
epp_state_for_BAT=power
"""

def check_root():
    if os.geteuid() == 0:
        return
    else:                                        
        print("auto-epp must be run with root privileges.")
        exit(1)

def read_config():
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w') as file:
            file.write(DEFAULT_CONFIG)
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    epp_state_for_AC = config.get("Settings", "epp_state_for_AC")
    epp_state_for_BAT = config.get("Settings", "epp_state_for_BAT")
    return epp_state_for_AC, epp_state_for_BAT

def get_battery_state():
    battery = psutil.sensors_battery()
    if battery.power_plugged:
        return "AC"
    else:
        return "Battery"

def set_governor():
    cpu_count = os.cpu_count()
    for cpu in range(cpu_count):
        governor_file_path = f'/sys/devices/system/cpu/cpu{cpu}/cpufreq/scaling_governor'
        try:
            with open(governor_file_path, 'w') as file:
                file.write("powersave")
        except:
            exit(1)

def set_epp(epp_value):
    cpu_count = os.cpu_count()
    for cpu in range(cpu_count):
        epp_file_path = f'/sys/devices/system/cpu/cpu{cpu}/cpufreq/energy_performance_preference'
        try:
            with open(epp_file_path, 'w') as file:
                file.write(epp_value)
        except:
            exit(1)
            
def main():
    check_root()
    epp_state_for_AC, epp_state_for_BAT = read_config()
    while True:
        set_governor()
        if get_battery_state() == "AC":
            set_epp(epp_state_for_AC)
        else:
            set_epp(epp_state_for_BAT)
        time.sleep(2)

if __name__ == "__main__":
    main()
